substitutions:
  pump_min_switch_time: "3s"
  pump_max_wait_time: "4s"
  pump_power_when_on: "912"
  boot_delay: "5min"
  min_pressure_dry_run: "600"
  min_pressure: "3200"
  max_pressure: "3700"
  pulses_per_liter: "600"

esphome:
  name: esp32-2
  friendly_name: esp32-2
  on_boot:
    - switch.turn_off: releu_pompa_real
    - lambda: id(boot_completed).publish_state(false);
    - lambda: id(pump_ready).publish_state(false); 
    - lambda: id(ha_problem).publish_state(true); 
    - lambda: id(connected).publish_state(false); 
    - wait_until:
       condition:
         - binary_sensor.is_on: connected
         - binary_sensor.is_off: ha_problem
       timeout: ${boot_delay}
    - if:
        condition:
           - binary_sensor.is_off: connected
        then:
          - lambda: id(ha_problem).publish_state(false); 
    - if:
        condition:
           - binary_sensor.is_off: ha_problem
           - lambda: 'return id(pressure).state <= ${min_pressure};'
        then:
            - switch.turn_on: releu_pompa_real
            - delay: ${pump_max_wait_time}
            - if:
                condition:
                  - lambda: 'return id(pressure).state >= ${min_pressure_dry_run};'
                then:
                  - lambda: id(pressure_very_low).publish_state(false);
                  - wait_until:
                      condition:
                         - lambda: 'return id(pressure).state >= ${max_pressure};'
                      timeout: 30sec
                  - switch.turn_off: releu_pompa
                  - switch.turn_off: releu_pompa_real 
            - if:
                condition:
                  - lambda: 'return id(pressure).state <= ${min_pressure_dry_run};'
                then:
                  - homeassistant.service:
                        service: notify.persistent_notification
                        data:
                          message: "Protectie dry run activata!"
                  - lambda: id(pressure_very_low).publish_state(true);
                  - switch.turn_off: releu_pompa
                  - switch.turn_off: releu_pompa_real 
    - if:
        condition:
            - lambda: 'return id(pressure).state >= ${min_pressure};'
        then:
            - lambda: id(pressure_very_low).publish_state(false);              
    - lambda: id(boot_completed).publish_state(true);  
    - lambda: id(pump_ready).publish_state(true);  




binary_sensor:
  - platform: status
    name: "Connected Status"
    id: connected

  - platform: template
    id: "boot_completed"
    name: "boot_completed"
    internal: False 

  - platform: template
    id: "pump_ready"
    name: "ready_for_start_or_stop"
    internal: False 

  - platform: template
    id: "pressure_very_low"
    name: "pressure_very_low"
    internal: False 

  - platform: homeassistant
    id: ha_problem
    name: Problema Pompa HA
    entity_id: input_boolean.problema_pompa_fantana
    internal: False
    on_release:
      then:
        - if:
           condition:
            - lambda: 'return id(pressure).state <= ${min_pressure};'
            - binary_sensor.is_off: pump_ready        
           then:
            - switch.turn_on: releu_pompa
            - lambda: id(pump_ready).publish_state(false);
            - delay: ${pump_min_switch_time}
            - lambda: id(pump_ready).publish_state(true);
        - if:
           condition:
            - lambda: 'return id(pressure).state <= ${min_pressure};'
            - binary_sensor.is_on: pump_ready
           then:
            - switch.turn_on: releu_pompa
            - lambda: id(pump_ready).publish_state(false);
            - delay: ${pump_min_switch_time}
            - lambda: id(pump_ready).publish_state(true);

    on_press:
      then:
        -  switch.turn_off: releu_pompa

switch:
  - platform: gpio
    name: "Releu Pompa Apa Rece Real"
    id: releu_pompa_real
    pin: 21
    on_turn_on:
      then:
       - lambda: id(powa).publish_state(${pump_power_when_on});
    on_turn_off:
      then:
       - lambda: id(powa).publish_state(0);

  - platform: template
    name: "Releu Pompa Apa Rece"
    id: releu_pompa
    optimistic: true
    on_turn_on:
      - if:
         condition:
            - binary_sensor.is_off: pressure_very_low
            - lambda: 'return id(pressure).state <= ${min_pressure};'
            - binary_sensor.is_off: ha_problem 
         then:
           - switch.turn_on: releu_pompa_real

      - if:
         condition:
          - binary_sensor.is_on: pressure_very_low
         then:
          - homeassistant.service:
                  service: notify.persistent_notification
                  data:
                     message: "Nu porneste, protectie dry run activata!"
          - delay: 0.1s         
          - switch.turn_off: releu_pompa
             

      - if:
         condition:
            - binary_sensor.is_on: ha_problem
         then:
            - homeassistant.service:
                  service: notify.persistent_notification
                  data:
                     message: "Nu porneste, dezactivat din Home Assistant!" 
            - delay: 0.1s         
            - switch.turn_off: releu_pompa
     
    on_turn_off:
      then:
       - switch.turn_off: releu_pompa_real

  #- platform: dallas
   # address: 0x55011453a93baa28
    #name: "Temperatura Pompa Apa Rece"
    #accuracy_decimals: 1

  - platform: ads1115
    multiplexer: 'A0_GND'
    gain: 2.048
    name: "ADS1115 Channel A0-GND"
    id: ads1115_ch_a0_gnd
    resolution: 16 bits
    update_interval: 0.1s
    filters:
      - or:
        - throttle: 5s
        - delta: 0.025
    

  - platform: template
    name: "Water Pump Power"
    state_class: measurement
    device_class: power
    unit_of_measurement: "W"
    accuracy_decimals: 0
    id: powa
    update_interval: never

  - platform: template
    name: "Presiune Apa Rece Fantana"
    state_class: measurement
    device_class: pressure
    unit_of_measurement: "hPa"
    accuracy_decimals: 0
    update_interval: 1s
    id: pressure
    lambda: |-
      return id(ads1115_ch_a0_gnd).state;
    filters:
      - lambda: return 3326.135873334 * x - 1813.7065032459;
    on_value_range:
        - below: ${min_pressure_dry_run}
          then:
          - if:
               condition:
                - binary_sensor.is_on: boot_completed
                - binary_sensor.is_off: ha_problem 
               then:
                - switch.turn_on: releu_pompa
                - delay: ${pump_max_wait_time}
                - if:
                   condition:
                    - lambda: 'return id(pressure).state <= ${min_pressure};'
                   then:
                    - lambda: id(pressure_very_low).publish_state(true);
                    - switch.turn_off: releu_pompa
                    - homeassistant.service:
                        service: notify.persistent_notification
                        data:
                          message: Problema pompa apa rece, presiune foarte mica in mers!
                   else:
                    - lambda: id(pressure_very_low).publish_state(false);

        - below: ${min_pressure}
          then:
          - if:
              condition:
                - binary_sensor.is_off: ha_problem
                - binary_sensor.is_on: pump_ready
                - binary_sensor.is_on: boot_completed
              then:
                - switch.turn_on: releu_pompa
                - lambda: id(pump_ready).publish_state(false);
                - delay: ${pump_min_switch_time}
                - lambda: id(pump_ready).publish_state(true);  
          - if:
              condition:
                - binary_sensor.is_off: ha_problem
                - binary_sensor.is_off: pump_ready
                - binary_sensor.is_on: boot_completed
              then:
                - wait_until: 
                      binary_sensor.is_on: pump_ready
                - switch.turn_on: releu_pompa
                - lambda: id(pump_ready).publish_state(false);
                - delay: ${pump_min_switch_time}
                - lambda: id(pump_ready).publish_state(true);                 

        - above: ${max_pressure}
          then:
          - if:
              condition:
                - binary_sensor.is_on: pump_ready
                - binary_sensor.is_on: boot_completed
              then:
                - switch.turn_off: releu_pompa
                - lambda: id(pump_ready).publish_state(false);
                - delay: ${pump_min_switch_time}
                - lambda: id(pump_ready).publish_state(true);  
          - if:
              condition:
                - binary_sensor.is_off: pump_ready
                - binary_sensor.is_on: boot_completed
              then:
                - wait_until:
                    condition: 
                      binary_sensor.is_on: pump_ready
                    timeout: ${pump_max_wait_time}
                - switch.turn_off: releu_pompa
                - lambda: id(pump_ready).publish_state(false);
                - delay: ${pump_min_switch_time}
                - lambda: id(pump_ready).publish_state(true);  
  
  - platform: pulse_counter
    pin: 33
    name: "Pulse Counter"
    id: pulse_counta
    update_interval: 1s
    use_pcnt: True
    internal_filter: 13us
    internal: False

    total:
      id: total_pulsuri
      name: 'total_pulsuri'
      state_class: total_increasing
      internal: false
             
  - platform: template
    name: "litri_total_apa_rece"
    icon: "mdi:water-sync"
    unit_of_measurement: "L"
    state_class: total_increasing
    device_class: water
    accuracy_decimals: 1
    update_interval: 1s
    lambda: |-
      return id(total_pulsuri).state;
    filters:
        - lambda: return x / ${pulses_per_liter};

  - platform: template
    name: "litri_pe_minut"
    state_class: measurement
    unit_of_measurement: "l/min"
    accuracy_decimals: 3
    update_interval: 1s
    lambda: |-
      return id(pulse_counta).state;
    filters:
        - lambda: return x / ${pulses_per_liter};

button:
  - platform: restart
    name: "Restart esp32-2"
  - platform: safe_mode
    name: "Restart (Safe Mode) esp32-2"




debug:
  update_interval: 1s
text_sensor:
  - platform: debug
    device:
      name: "Device Info"
    reset_reason:
      name: "Reset Reason"
esp32:
  board: esp32dev
  framework:
    type: arduino
captive_portal:    
i2c:
  sda: 26
  scl: 25
  scan: true
  id: bus_a
logger:
  #level: info
api:
  encryption:
    key: "YqW4TqjkfluQWngRyvA/hu5tYdBH/5CwJqXB1gQ5mK0="
ota:
  password: "f9bdb75940e8bd5b7155c48aae726d87"
wifi:
  ap:
    ssid: "Esp32-2 Fallback Hotspot"
    password: "9uxUqO7sHKsL"
  networks:
    - ssid: !secret wifi_ssid
      password: !secret wifi_password
      manual_ip:
        static_ip: 192.168.0.139
        gateway: 192.168.0.1
        subnet: 255.255.255.0
    - ssid: !secret wifi_ssid_2
      password: !secret wifi_password_2 
      manual_ip:
        static_ip: 192.168.0.139
        gateway: 192.168.0.1
        subnet: 255.255.255.0

ads1115:
  - address: 0x48
    continuous_mode: on
